// <auto-generated />
using System;
using MFG.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MFG.DataAccess.Migrations
{
    [DbContext(typeof(MFGContext))]
    [Migration("20200630182001_Added UseCaseLog table")]
    partial class AddedUseCaseLogtable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MFG.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 896, DateTimeKind.Utc).AddTicks(6102),
                            IsActive = true,
                            Name = "Beograd"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 896, DateTimeKind.Utc).AddTicks(8239),
                            IsActive = true,
                            Name = "Novi Sad"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 896, DateTimeKind.Utc).AddTicks(8307),
                            IsActive = true,
                            Name = "Niš"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 896, DateTimeKind.Utc).AddTicks(8331),
                            IsActive = true,
                            Name = "Vrnjačka banja"
                        });
                });

            modelBuilder.Entity("MFG.Domain.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MFG.Domain.Festival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTickets")
                        .HasColumnType("int")
                        .HasMaxLength(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceID");

                    b.ToTable("Festivals");
                });

            modelBuilder.Entity("MFG.Domain.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.ToTable("Halls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7376),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Sala 1",
                            NumberOfSeats = 412
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7523),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Aneks A",
                            NumberOfSeats = 198
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7547),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Aneks B",
                            NumberOfSeats = 198
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7572),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Japanski salon",
                            NumberOfSeats = 140
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7591),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Velika dvorana",
                            NumberOfSeats = 3672
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7621),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Amfiteatar",
                            NumberOfSeats = 454
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7645),
                            IsActive = true,
                            LocationID = 2,
                            Name = "Sala 1",
                            NumberOfSeats = 1382
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7669),
                            IsActive = true,
                            LocationID = 2,
                            Name = "Sala 2",
                            NumberOfSeats = 78
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7689),
                            IsActive = true,
                            LocationID = 2,
                            Name = "Sala 3",
                            NumberOfSeats = 72
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7718),
                            IsActive = true,
                            LocationID = 3,
                            Name = "Velika sala",
                            NumberOfSeats = 483
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7738),
                            IsActive = true,
                            LocationID = 3,
                            Name = "Sala amerikana",
                            NumberOfSeats = 200
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7757),
                            IsActive = true,
                            LocationID = 4,
                            Name = "Sala 1",
                            NumberOfSeats = 78
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7777),
                            IsActive = true,
                            LocationID = 4,
                            Name = "Sala 2",
                            NumberOfSeats = 298
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7801),
                            IsActive = true,
                            LocationID = 5,
                            Name = "Sala 1",
                            NumberOfSeats = 125
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7821),
                            IsActive = true,
                            LocationID = 5,
                            Name = "Sala 2",
                            NumberOfSeats = 278
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7841),
                            IsActive = true,
                            LocationID = 6,
                            Name = "Letnja pozornica",
                            NumberOfSeats = 370
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7860),
                            IsActive = true,
                            LocationID = 7,
                            Name = "Sala 1",
                            NumberOfSeats = 158
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7894),
                            IsActive = true,
                            LocationID = 7,
                            Name = "Sala 2",
                            NumberOfSeats = 326
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7919),
                            IsActive = true,
                            LocationID = 7,
                            Name = "Velika sala",
                            NumberOfSeats = 1580
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7938),
                            IsActive = true,
                            LocationID = 8,
                            Name = "Sala 1",
                            NumberOfSeats = 324
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(7958),
                            IsActive = true,
                            LocationID = 8,
                            Name = "Sala 2",
                            NumberOfSeats = 279
                        });
                });

            modelBuilder.Entity("MFG.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(2551),
                            IsActive = true,
                            Name = "Sava Centar"
                        },
                        new
                        {
                            Id = 2,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(2658),
                            IsActive = true,
                            Name = "Dom sindikata"
                        },
                        new
                        {
                            Id = 3,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(2678),
                            IsActive = true,
                            Name = "Dom omladine"
                        },
                        new
                        {
                            Id = 4,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(2697),
                            IsActive = true,
                            Name = "Centar za kulturu Vlada Divljan"
                        },
                        new
                        {
                            Id = 5,
                            CityID = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Bioskop"
                        },
                        new
                        {
                            Id = 6,
                            CityID = 4,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(2722),
                            IsActive = true,
                            Name = "Letnja pozornica"
                        },
                        new
                        {
                            Id = 7,
                            CityID = 2,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(2736),
                            IsActive = true,
                            Name = "Kulturni centar Novog Sada"
                        },
                        new
                        {
                            Id = 8,
                            CityID = 3,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 897, DateTimeKind.Utc).AddTicks(2756),
                            IsActive = true,
                            Name = "Niški kulturni centar"
                        });
                });

            modelBuilder.Entity("MFG.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AvgRating")
                        .HasColumnType("real")
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MFG.Domain.MovieDirector", b =>
                {
                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.HasKey("DirectorID", "MovieID");

                    b.HasIndex("MovieID");

                    b.ToTable("MovieDirector");
                });

            modelBuilder.Entity("MFG.Domain.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationID")
                        .IsUnique();

                    b.HasIndex("CityID", "LocationID")
                        .IsUnique();

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 898, DateTimeKind.Utc).AddTicks(2368),
                            IsActive = true,
                            LocationID = 1
                        },
                        new
                        {
                            Id = 2,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 898, DateTimeKind.Utc).AddTicks(2500),
                            IsActive = true,
                            LocationID = 2
                        },
                        new
                        {
                            Id = 3,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 898, DateTimeKind.Utc).AddTicks(2524),
                            IsActive = true,
                            LocationID = 3
                        },
                        new
                        {
                            Id = 4,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 898, DateTimeKind.Utc).AddTicks(2544),
                            IsActive = true,
                            LocationID = 4
                        },
                        new
                        {
                            Id = 5,
                            CityID = 4,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 898, DateTimeKind.Utc).AddTicks(2563),
                            IsActive = true,
                            LocationID = 5
                        },
                        new
                        {
                            Id = 6,
                            CityID = 4,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 898, DateTimeKind.Utc).AddTicks(2602),
                            IsActive = true,
                            LocationID = 6
                        },
                        new
                        {
                            Id = 7,
                            CityID = 2,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 898, DateTimeKind.Utc).AddTicks(2627),
                            IsActive = true,
                            LocationID = 7
                        },
                        new
                        {
                            Id = 8,
                            CityID = 3,
                            CreatedAt = new DateTime(2020, 6, 30, 18, 20, 0, 898, DateTimeKind.Utc).AddTicks(2641),
                            IsActive = true,
                            LocationID = 8
                        });
                });

            modelBuilder.Entity("MFG.Domain.Projection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FestivalID")
                        .HasColumnType("int");

                    b.Property<int>("HallID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FestivalID");

                    b.HasIndex("HallID");

                    b.HasIndex("MovieID");

                    b.ToTable("Projections");
                });

            modelBuilder.Entity("MFG.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user"
                        },
                        new
                        {
                            Id = 2,
                            Name = "seller"
                        },
                        new
                        {
                            Id = 3,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("MFG.Domain.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FestivalID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasMaxLength(10);

                    b.Property<int>("ProjectionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FestivalID");

                    b.HasIndex("ProjectionID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MFG.Domain.TicketReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Bought")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasMaxLength(3);

                    b.Property<string>("ReservationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ReservationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 6, 30, 18, 20, 0, 972, DateTimeKind.Utc).AddTicks(6490));

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasMaxLength(20);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationCode")
                        .IsUnique();

                    b.HasIndex("TicketID");

                    b.HasIndex("UserID");

                    b.ToTable("TicketReservations");
                });

            modelBuilder.Entity("MFG.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MFG.Domain.Festival", b =>
                {
                    b.HasOne("MFG.Domain.Place", "Place")
                        .WithMany("Festivals")
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Hall", b =>
                {
                    b.HasOne("MFG.Domain.Location", "Location")
                        .WithMany("Halls")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Location", b =>
                {
                    b.HasOne("MFG.Domain.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.MovieDirector", b =>
                {
                    b.HasOne("MFG.Domain.Director", "Director")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Movie", "Movie")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Place", b =>
                {
                    b.HasOne("MFG.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Location", "Location")
                        .WithOne()
                        .HasForeignKey("MFG.Domain.Place", "LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Projection", b =>
                {
                    b.HasOne("MFG.Domain.Festival", "Festival")
                        .WithMany("Projections")
                        .HasForeignKey("FestivalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Hall", "Hall")
                        .WithMany("Projections")
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Movie", "Movie")
                        .WithMany("Projections")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Ticket", b =>
                {
                    b.HasOne("MFG.Domain.Festival", "Festival")
                        .WithMany("Tickets")
                        .HasForeignKey("FestivalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Projection", "Projection")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.TicketReservation", b =>
                {
                    b.HasOne("MFG.Domain.Ticket", "Ticket")
                        .WithMany("TicketReservations")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.User", "User")
                        .WithMany("TicketReservations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.User", b =>
                {
                    b.HasOne("MFG.Domain.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
