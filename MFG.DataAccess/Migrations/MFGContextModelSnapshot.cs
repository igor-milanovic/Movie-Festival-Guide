// <auto-generated />
using System;
using MFG.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MFG.DataAccess.Migrations
{
    [DbContext(typeof(MFGContext))]
    partial class MFGContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MFG.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(1520),
                            IsActive = true,
                            Name = "Beograd"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(2968),
                            IsActive = true,
                            Name = "Novi Sad"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(3016),
                            IsActive = true,
                            Name = "Niš"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(3041),
                            IsActive = true,
                            Name = "Vrnjačka banja"
                        });
                });

            modelBuilder.Entity("MFG.Domain.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MFG.Domain.Festival", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxTickets")
                        .HasColumnType("int")
                        .HasMaxLength(3);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("PlaceID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlaceID");

                    b.ToTable("Festivals");
                });

            modelBuilder.Entity("MFG.Domain.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationID");

                    b.ToTable("Halls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(135),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Sala 1",
                            NumberOfSeats = 412
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(248),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Aneks A",
                            NumberOfSeats = 198
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(267),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Aneks B",
                            NumberOfSeats = 198
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(282),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Japanski salon",
                            NumberOfSeats = 140
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(302),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Velika dvorana",
                            NumberOfSeats = 3672
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(321),
                            IsActive = true,
                            LocationID = 1,
                            Name = "Amfiteatar",
                            NumberOfSeats = 454
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(336),
                            IsActive = true,
                            LocationID = 2,
                            Name = "Sala 1",
                            NumberOfSeats = 1382
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(355),
                            IsActive = true,
                            LocationID = 2,
                            Name = "Sala 2",
                            NumberOfSeats = 78
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(370),
                            IsActive = true,
                            LocationID = 2,
                            Name = "Sala 3",
                            NumberOfSeats = 72
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(390),
                            IsActive = true,
                            LocationID = 3,
                            Name = "Velika sala",
                            NumberOfSeats = 483
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(404),
                            IsActive = true,
                            LocationID = 3,
                            Name = "Sala amerikana",
                            NumberOfSeats = 200
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(419),
                            IsActive = true,
                            LocationID = 4,
                            Name = "Sala 1",
                            NumberOfSeats = 78
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(438),
                            IsActive = true,
                            LocationID = 4,
                            Name = "Sala 2",
                            NumberOfSeats = 298
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(453),
                            IsActive = true,
                            LocationID = 5,
                            Name = "Sala 1",
                            NumberOfSeats = 125
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(468),
                            IsActive = true,
                            LocationID = 5,
                            Name = "Sala 2",
                            NumberOfSeats = 278
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(482),
                            IsActive = true,
                            LocationID = 6,
                            Name = "Letnja pozornica",
                            NumberOfSeats = 370
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(502),
                            IsActive = true,
                            LocationID = 7,
                            Name = "Sala 1",
                            NumberOfSeats = 158
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(517),
                            IsActive = true,
                            LocationID = 7,
                            Name = "Sala 2",
                            NumberOfSeats = 326
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(536),
                            IsActive = true,
                            LocationID = 7,
                            Name = "Velika sala",
                            NumberOfSeats = 1580
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(551),
                            IsActive = true,
                            LocationID = 8,
                            Name = "Sala 1",
                            NumberOfSeats = 324
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(566),
                            IsActive = true,
                            LocationID = 8,
                            Name = "Sala 2",
                            NumberOfSeats = 279
                        });
                });

            modelBuilder.Entity("MFG.Domain.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(6126),
                            IsActive = true,
                            Name = "Sava Centar"
                        },
                        new
                        {
                            Id = 2,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(6263),
                            IsActive = true,
                            Name = "Dom sindikata"
                        },
                        new
                        {
                            Id = 3,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(6282),
                            IsActive = true,
                            Name = "Dom omladine"
                        },
                        new
                        {
                            Id = 4,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(6302),
                            IsActive = true,
                            Name = "Centar za kulturu Vlada Divljan"
                        },
                        new
                        {
                            Id = 5,
                            CityID = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Bioskop"
                        },
                        new
                        {
                            Id = 6,
                            CityID = 4,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(6326),
                            IsActive = true,
                            Name = "Letnja pozornica"
                        },
                        new
                        {
                            Id = 7,
                            CityID = 2,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(6341),
                            IsActive = true,
                            Name = "Kulturni centar Novog Sada"
                        },
                        new
                        {
                            Id = 8,
                            CityID = 3,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 351, DateTimeKind.Utc).AddTicks(6360),
                            IsActive = true,
                            Name = "Niški kulturni centar"
                        });
                });

            modelBuilder.Entity("MFG.Domain.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AvgRating")
                        .HasColumnType("real")
                        .HasMaxLength(4);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Length")
                        .HasColumnType("int")
                        .HasMaxLength(4);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasMaxLength(4);

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MFG.Domain.MovieDirector", b =>
                {
                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.HasKey("DirectorID", "MovieID");

                    b.HasIndex("MovieID");

                    b.ToTable("MovieDirector");
                });

            modelBuilder.Entity("MFG.Domain.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LocationID")
                        .IsUnique();

                    b.HasIndex("CityID", "LocationID")
                        .IsUnique();

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(3602),
                            IsActive = true,
                            LocationID = 1
                        },
                        new
                        {
                            Id = 2,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(3729),
                            IsActive = true,
                            LocationID = 2
                        },
                        new
                        {
                            Id = 3,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(3748),
                            IsActive = true,
                            LocationID = 3
                        },
                        new
                        {
                            Id = 4,
                            CityID = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(3768),
                            IsActive = true,
                            LocationID = 4
                        },
                        new
                        {
                            Id = 5,
                            CityID = 4,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(3782),
                            IsActive = true,
                            LocationID = 5
                        },
                        new
                        {
                            Id = 6,
                            CityID = 4,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(3807),
                            IsActive = true,
                            LocationID = 6
                        },
                        new
                        {
                            Id = 7,
                            CityID = 2,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(3822),
                            IsActive = true,
                            LocationID = 7
                        },
                        new
                        {
                            Id = 8,
                            CityID = 3,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 352, DateTimeKind.Utc).AddTicks(3836),
                            IsActive = true,
                            LocationID = 8
                        });
                });

            modelBuilder.Entity("MFG.Domain.Projection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BeginsAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FestivalID")
                        .HasColumnType("int");

                    b.Property<int>("HallID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("MovieID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FestivalID");

                    b.HasIndex("HallID");

                    b.HasIndex("MovieID");

                    b.ToTable("Projections");
                });

            modelBuilder.Entity("MFG.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "user"
                        },
                        new
                        {
                            Id = 2,
                            Name = "seller"
                        },
                        new
                        {
                            Id = 3,
                            Name = "admin"
                        });
                });

            modelBuilder.Entity("MFG.Domain.RoleUseCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UseCaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleUseCases");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleId = 1,
                            UseCaseId = 1101
                        },
                        new
                        {
                            Id = 2,
                            RoleId = 1,
                            UseCaseId = 1102
                        },
                        new
                        {
                            Id = 3,
                            RoleId = 1,
                            UseCaseId = 1103
                        },
                        new
                        {
                            Id = 4,
                            RoleId = 1,
                            UseCaseId = 2102
                        },
                        new
                        {
                            Id = 5,
                            RoleId = 1,
                            UseCaseId = 1113
                        },
                        new
                        {
                            Id = 6,
                            RoleId = 1,
                            UseCaseId = 222
                        },
                        new
                        {
                            Id = 7,
                            RoleId = 1,
                            UseCaseId = 221
                        },
                        new
                        {
                            Id = 8,
                            RoleId = 1,
                            UseCaseId = 232
                        },
                        new
                        {
                            Id = 9,
                            RoleId = 1,
                            UseCaseId = 231
                        },
                        new
                        {
                            Id = 10,
                            RoleId = 1,
                            UseCaseId = 262
                        },
                        new
                        {
                            Id = 11,
                            RoleId = 1,
                            UseCaseId = 261
                        },
                        new
                        {
                            Id = 12,
                            RoleId = 1,
                            UseCaseId = 282
                        },
                        new
                        {
                            Id = 13,
                            RoleId = 1,
                            UseCaseId = 281
                        },
                        new
                        {
                            Id = 14,
                            RoleId = 1,
                            UseCaseId = 292
                        },
                        new
                        {
                            Id = 15,
                            RoleId = 1,
                            UseCaseId = 291
                        },
                        new
                        {
                            Id = 16,
                            RoleId = 2,
                            UseCaseId = 1104
                        },
                        new
                        {
                            Id = 17,
                            RoleId = 2,
                            UseCaseId = 2102
                        },
                        new
                        {
                            Id = 18,
                            RoleId = 2,
                            UseCaseId = 1113
                        },
                        new
                        {
                            Id = 19,
                            RoleId = 2,
                            UseCaseId = 222
                        },
                        new
                        {
                            Id = 20,
                            RoleId = 2,
                            UseCaseId = 221
                        },
                        new
                        {
                            Id = 21,
                            RoleId = 2,
                            UseCaseId = 232
                        },
                        new
                        {
                            Id = 22,
                            RoleId = 2,
                            UseCaseId = 231
                        },
                        new
                        {
                            Id = 23,
                            RoleId = 2,
                            UseCaseId = 262
                        },
                        new
                        {
                            Id = 24,
                            RoleId = 2,
                            UseCaseId = 261
                        },
                        new
                        {
                            Id = 25,
                            RoleId = 2,
                            UseCaseId = 282
                        },
                        new
                        {
                            Id = 26,
                            RoleId = 2,
                            UseCaseId = 281
                        },
                        new
                        {
                            Id = 27,
                            RoleId = 2,
                            UseCaseId = 292
                        },
                        new
                        {
                            Id = 28,
                            RoleId = 2,
                            UseCaseId = 291
                        },
                        new
                        {
                            Id = 29,
                            RoleId = 3,
                            UseCaseId = 222
                        },
                        new
                        {
                            Id = 30,
                            RoleId = 3,
                            UseCaseId = 221
                        },
                        new
                        {
                            Id = 31,
                            RoleId = 3,
                            UseCaseId = 232
                        },
                        new
                        {
                            Id = 32,
                            RoleId = 3,
                            UseCaseId = 231
                        },
                        new
                        {
                            Id = 33,
                            RoleId = 3,
                            UseCaseId = 262
                        },
                        new
                        {
                            Id = 34,
                            RoleId = 3,
                            UseCaseId = 261
                        },
                        new
                        {
                            Id = 35,
                            RoleId = 3,
                            UseCaseId = 282
                        },
                        new
                        {
                            Id = 36,
                            RoleId = 3,
                            UseCaseId = 281
                        },
                        new
                        {
                            Id = 37,
                            RoleId = 3,
                            UseCaseId = 292
                        },
                        new
                        {
                            Id = 38,
                            RoleId = 3,
                            UseCaseId = 291
                        },
                        new
                        {
                            Id = 39,
                            RoleId = 3,
                            UseCaseId = 1113
                        },
                        new
                        {
                            Id = 40,
                            RoleId = 3,
                            UseCaseId = 1121
                        },
                        new
                        {
                            Id = 41,
                            RoleId = 3,
                            UseCaseId = 111
                        },
                        new
                        {
                            Id = 42,
                            RoleId = 3,
                            UseCaseId = 112
                        },
                        new
                        {
                            Id = 43,
                            RoleId = 3,
                            UseCaseId = 113
                        },
                        new
                        {
                            Id = 44,
                            RoleId = 3,
                            UseCaseId = 121
                        },
                        new
                        {
                            Id = 45,
                            RoleId = 3,
                            UseCaseId = 122
                        },
                        new
                        {
                            Id = 46,
                            RoleId = 3,
                            UseCaseId = 123
                        },
                        new
                        {
                            Id = 47,
                            RoleId = 3,
                            UseCaseId = 131
                        },
                        new
                        {
                            Id = 48,
                            RoleId = 3,
                            UseCaseId = 132
                        },
                        new
                        {
                            Id = 49,
                            RoleId = 3,
                            UseCaseId = 133
                        },
                        new
                        {
                            Id = 50,
                            RoleId = 3,
                            UseCaseId = 141
                        },
                        new
                        {
                            Id = 51,
                            RoleId = 3,
                            UseCaseId = 142
                        },
                        new
                        {
                            Id = 52,
                            RoleId = 3,
                            UseCaseId = 143
                        },
                        new
                        {
                            Id = 53,
                            RoleId = 3,
                            UseCaseId = 151
                        },
                        new
                        {
                            Id = 54,
                            RoleId = 3,
                            UseCaseId = 152
                        },
                        new
                        {
                            Id = 55,
                            RoleId = 3,
                            UseCaseId = 153
                        },
                        new
                        {
                            Id = 56,
                            RoleId = 3,
                            UseCaseId = 161
                        },
                        new
                        {
                            Id = 57,
                            RoleId = 3,
                            UseCaseId = 162
                        },
                        new
                        {
                            Id = 58,
                            RoleId = 3,
                            UseCaseId = 163
                        },
                        new
                        {
                            Id = 59,
                            RoleId = 3,
                            UseCaseId = 171
                        },
                        new
                        {
                            Id = 60,
                            RoleId = 3,
                            UseCaseId = 172
                        },
                        new
                        {
                            Id = 61,
                            RoleId = 3,
                            UseCaseId = 173
                        },
                        new
                        {
                            Id = 62,
                            RoleId = 3,
                            UseCaseId = 181
                        },
                        new
                        {
                            Id = 63,
                            RoleId = 3,
                            UseCaseId = 182
                        },
                        new
                        {
                            Id = 64,
                            RoleId = 3,
                            UseCaseId = 183
                        },
                        new
                        {
                            Id = 65,
                            RoleId = 3,
                            UseCaseId = 191
                        },
                        new
                        {
                            Id = 66,
                            RoleId = 3,
                            UseCaseId = 192
                        },
                        new
                        {
                            Id = 67,
                            RoleId = 3,
                            UseCaseId = 193
                        },
                        new
                        {
                            Id = 68,
                            RoleId = 3,
                            UseCaseId = 1112
                        },
                        new
                        {
                            Id = 69,
                            RoleId = 3,
                            UseCaseId = 211
                        },
                        new
                        {
                            Id = 70,
                            RoleId = 3,
                            UseCaseId = 212
                        },
                        new
                        {
                            Id = 71,
                            RoleId = 3,
                            UseCaseId = 242
                        },
                        new
                        {
                            Id = 72,
                            RoleId = 3,
                            UseCaseId = 241
                        },
                        new
                        {
                            Id = 73,
                            RoleId = 3,
                            UseCaseId = 251
                        },
                        new
                        {
                            Id = 74,
                            RoleId = 3,
                            UseCaseId = 252
                        },
                        new
                        {
                            Id = 75,
                            RoleId = 3,
                            UseCaseId = 271
                        },
                        new
                        {
                            Id = 76,
                            RoleId = 3,
                            UseCaseId = 272
                        },
                        new
                        {
                            Id = 77,
                            RoleId = 3,
                            UseCaseId = 2101
                        },
                        new
                        {
                            Id = 78,
                            RoleId = 3,
                            UseCaseId = 2102
                        },
                        new
                        {
                            Id = 79,
                            RoleId = 3,
                            UseCaseId = 2111
                        },
                        new
                        {
                            Id = 80,
                            RoleId = 3,
                            UseCaseId = 2111
                        },
                        new
                        {
                            Id = 81,
                            RoleId = 3,
                            UseCaseId = 2121
                        },
                        new
                        {
                            Id = 82,
                            RoleId = 2,
                            UseCaseId = 2101
                        },
                        new
                        {
                            Id = 83,
                            RoleId = 2,
                            UseCaseId = 1101
                        },
                        new
                        {
                            Id = 84,
                            RoleId = 2,
                            UseCaseId = 1102
                        },
                        new
                        {
                            Id = 85,
                            RoleId = 2,
                            UseCaseId = 1103
                        });
                });

            modelBuilder.Entity("MFG.Domain.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FestivalID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasMaxLength(10);

                    b.Property<int>("ProjectionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FestivalID");

                    b.HasIndex("ProjectionID");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("MFG.Domain.TicketReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Bought")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasMaxLength(3);

                    b.Property<string>("ReservationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ReservationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 7, 1, 13, 45, 21, 430, DateTimeKind.Utc).AddTicks(827));

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasMaxLength(20);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReservationCode")
                        .IsUnique();

                    b.HasIndex("TicketID");

                    b.HasIndex("UserID");

                    b.ToTable("TicketReservations");
                });

            modelBuilder.Entity("MFG.Domain.UseCaseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Actor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UseCaseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UseCaseLogs");
                });

            modelBuilder.Entity("MFG.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)")
                        .HasMaxLength(40);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleID");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[Username] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 353, DateTimeKind.Utc).AddTicks(6610),
                            Email = "pera@gmail.com",
                            FirstName = "Petar",
                            IsActive = true,
                            LastName = "Peric",
                            Password = "sifra123",
                            RoleID = 3,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 7, 1, 13, 45, 21, 353, DateTimeKind.Utc).AddTicks(6737),
                            Email = "miki@gmail.com",
                            FirstName = "Mitar",
                            IsActive = true,
                            LastName = "Miric",
                            Password = "sifra123",
                            RoleID = 2,
                            Username = "seller"
                        });
                });

            modelBuilder.Entity("MFG.Domain.Festival", b =>
                {
                    b.HasOne("MFG.Domain.Place", "Place")
                        .WithMany("Festivals")
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Hall", b =>
                {
                    b.HasOne("MFG.Domain.Location", "Location")
                        .WithMany("Halls")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Location", b =>
                {
                    b.HasOne("MFG.Domain.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.MovieDirector", b =>
                {
                    b.HasOne("MFG.Domain.Director", "Director")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Movie", "Movie")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Place", b =>
                {
                    b.HasOne("MFG.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Location", "Location")
                        .WithOne()
                        .HasForeignKey("MFG.Domain.Place", "LocationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Projection", b =>
                {
                    b.HasOne("MFG.Domain.Festival", "Festival")
                        .WithMany("Projections")
                        .HasForeignKey("FestivalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Hall", "Hall")
                        .WithMany("Projections")
                        .HasForeignKey("HallID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Movie", "Movie")
                        .WithMany("Projections")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.RoleUseCase", b =>
                {
                    b.HasOne("MFG.Domain.Role", null)
                        .WithMany("RoleUseCases")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.Ticket", b =>
                {
                    b.HasOne("MFG.Domain.Festival", "Festival")
                        .WithMany("Tickets")
                        .HasForeignKey("FestivalID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.Projection", "Projection")
                        .WithMany("Tickets")
                        .HasForeignKey("ProjectionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.TicketReservation", b =>
                {
                    b.HasOne("MFG.Domain.Ticket", "Ticket")
                        .WithMany("TicketReservations")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MFG.Domain.User", "User")
                        .WithMany("TicketReservations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MFG.Domain.User", b =>
                {
                    b.HasOne("MFG.Domain.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
